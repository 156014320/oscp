外因：
1、研发团队的目标是功能性：在产品研发和迭代中，研发团队最优需要达到的是产品的功能性目标，有时甚至会选择牺牲安全性来达到某些性能指标，因此安全容易作为阻碍，不易受到研发团队快速迭代的欢迎。
2、研发团队缺乏安全意识：80%的企业研发人员并没有接受过安全编码培训，缺乏基本的安全意识->研发人员无法写出安全的代码+研发人员对安全的介入持反感的态度，认为破坏了研发的整体秩序。
3、研发团队只有在需要安全的时候才会想到让安全团队介入整个研发过程。
内因：
1、SDL自动化程度低，流程冗长复杂会让整个迭代过程拉长，
2、SDL工具误报高，覆盖率低导致安全产出并不明显，让研发团队对SDL失去耐心，最终逃避甚到放弃采用SDL来提高产品安全性。

解决思路：
意识先行，Top-Down，绩效共担：打破文化隔阂，建立统一的目标感。培训、风险意识教育、绩效共担、Top-Down的方式来进行。
发生冲突或问题，试点突破，安全研发面对面，捆绑不推锅：
发生各种冲突是在所难免的。但每个研发团队总有价值观比较正面积极的成员，或是团队leader，或是架构师，在刚开始的阶段，安全团队通过与这类同事合作，甚至可以考虑适当让出部分业绩给对方，让对方有足够的动力去配合安全团队开展SDL的工作，之后逐步认识到并认可安全的价值，进而影响和帮助整个团队形成统一的安全价值观，
安全团队直接和研发团队坐在一起，每天实时沟通安全问题，响应研发的安全需求，安全与研发是捆绑在一起的，需要共同承担安全的结果。
当遇到问题时，应该站在更高的角度来分析和解决问题，组织边界上的团队都需要更勇于承担安全的责任，抱着把锅甩给别人的想法不利于SDL的推广。
很多时候，研发团队不是不愿意承担结果，很大程度上是没有能力承担结果或是不愿意独自承担结果，找到各自的定位。

落地细则：
安全需求分析（威胁建模 ）：自动化要求比较低，更多地是需要丰富的应用checklist，能满足企业的常见业务场景，具备一定的成熟度，对于新兴的业务场景能灵活调整，给出较完善的解决方案。
代码安全检查（白盒）：
代码安全规范不应太过于通用，应根据企业的应用特点、开发语言、安全风险类型，以及研发人员的水平制定。
制定的代码安全规范应能很好的配合白盒工具制定检查策略，降低误报率，提升发现效率，同时应明确代码安全的解决方案。
白盒工具应遵从DevOps迭代要求，与代码仓库工具和集成工具能结合，研发人员能预操作，降低使用难度。白盒检测出来的问题除了使用代码修改外，更多地应依赖框架来解决，比如注入、XSS、CSRF等应更多考虑在框架层面统一解决。 
黑灰盒安全测试（黑盒）：黑盒检查是预发布之前的最后一环，是准确率最高的阶段。黑灰盒工具首先要保障的就是对功能点的覆盖率，确保能从攻击者的角度发现更多的问题。保障这两点首先要结合测试的工具提升覆盖率，发现每一个功能点和输入点，尽可能尝试更多的安全测试用例对其进行测试。
上线安全审查（SDL流程建设）
线上安全监测（逃逸SDL应用检查）

安全人员要求
1、威胁建模的人员应该有一定的业务理解能力和丰富的安全攻防经验。
2、制定代码安全规范和打造白盒工具的人员首先需要具备一定的代码能力，在架构层面能和研发人员或架构师讨论最优的安全问题解决方案，
在培训研发人员的时候能从企业的实际情况出发，而不是完全站在安全人员的视角。
3、开发黑灰盒工具的人员需要了解测试过程，对安全漏洞攻防有深入的了解，能将二者结合起来在测试过程中完美的融入安全测试用例。

与项目管理的结合：
完整的流程把威胁建模与需求评审结合、白盒与集成流程结合、黑盒与测试流程结合，上线审查与预发布流程结合。关键性的流程则更多关注于测试流程和预发布流程，确保上线之前能看到应用的安全性结果。

SDL如何评价？
有效性：上线前检测出漏洞数和上线后发现的漏洞数
实施效率：安全测试效率、漏洞修复时间、工具自动化程度
资源分配：项目组SDL问题检出数，包括需求评审、代码规范
